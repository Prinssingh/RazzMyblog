This XML file does not appear to have any style information associated with it. The document tree is shown below.
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
<link href="https://quilljs.com/feed.xml" rel="self" type="application/atom+xml"/>
<link href="https://quilljs.com/" rel="alternate" type="text/html"/>
<updated>2019-08-09T12:25:29-07:00</updated>
<id>https://quilljs.com/feed.xml</id>
<title type="html">Quill - Your powerful rich text editor</title>
<subtitle>
Quill is a free, open source WYSIWYG editor built for the modern web. Completely customize it for any need with its modular architecture and expressive API.
</subtitle>
<entry>
<title type="html">Announcing Quill 1.0</title>
<link href="https://quilljs.com/blog/announcing-quill-1-0/" rel="alternate" type="text/html" title="Announcing Quill 1.0"/>
<published>2016-09-06T00:00:00-07:00</published>
<updated>2016-09-06T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/accouncing-quill-1-0</id>
<content type="html" xml:base="https://quilljs.com/blog/announcing-quill-1-0/">
<p>Quill 1.0 has arrived. It was just two years ago that Quill made its public debut as an open source project. Today, it can be found in applications and products of all sizes, ranging from personal projects and promising startups, to established public companies.</p> <p><strong>Quill is designed as an easy to use editor, to support content creation across the web.</strong> It is built on top of consistent and predictable constructs, exposed through a powerful <a href="/docs/api/">API</a>. With coverage across both ends of the complexity spectrum, Quill aims to be the defacto rich text editor for the web.</p> <p>In the 111 releases, Quill has iterated relentlessly towards this goal. It has stabilized its API, moved essential internal implementations into customizable modules, and exposed its document model for users to define and add entirely new formats and content.</p> <ol> <li><a href="/blog/announcing-quill-1-0/#new-features">New Features</a></li> <li><a href="/blog/announcing-quill-1-0/#parchment">Parchment</a></li> <li><a href="/blog/announcing-quill-1-0/#website">Website</a></li> <li><a href="/blog/announcing-quill-1-0/#whats-next">What’s Next</a></li> <li><a href="/blog/announcing-quill-1-0/#getting-started">Getting Started</a></li> <li><a href="/blog/announcing-quill-1-0/#credits">Credits</a></li> </ol> <!-- more --> <h3 id="new-features">New Features</h3> <p>Editable <a href="/docs/modules/syntax/">Syntax Highlighted Code</a> blocks can now seamlessly exist inline with the rest of your text.</p> <p><img src="/assets/images/blog/syntax.png" alt="Syntax Highlighted Code" /></p> <p>Beautifully rendered <a href="/docs/modules/formula/">LaTeX formulas</a> can be inserted to your contents.</p> <p><img src="/assets/images/blog/formula.png" alt="Formula" /></p> <p><strong>Many, many new formats</strong> have been added, including superscript, subscript, inline code, code blocks, headers, blockquotes, text direction, videos, and nested lists. Inline styles can now also use classes <a href="/playground/#class-vs-inline-style">instead</a>.</p> <p>An entirely new theme <a href="/docs/themes/#bubble">Bubble</a> has also been added, based on a floating toolbar.</p> <p><img src="/assets/images/blog/bubble.png" alt="Bubble Theme" /></p> <p>Take a look at the <a href="https://github.com/quilljs/quill/blob/develop/CHANGELOG.md">Changelog</a> to see an exhaustive list.</p> <h3 id="parchment">Parchment</h3> <p>As the biggest feature in Quill 1.0, <a href="https://github.com/quilljs/parchment/">Parchment</a> deserves its own mention. It offers a powerful abstraction over the DOM to enable custom formats and content in Quill. It is responsible for the numerous new formats added in Quill 1.0, including videos, syntax highlighted code, and formulas.</p> <p>With Parchment, you can now enhance or customize existing Quill formats or add entirely new ones in your own application. Take a look at <a href="/guides/cloning-medium-with-parchment/">Cloning Medium with Parchment</a> for a detailed guide.</p> <h3 id="website">Website</h3> <p>In addition to the fancy new features, Quill’s documentation site has also been given an upgrade. The <a href="/docs/">referential</a> portions have all been filled out, with no more incomplete or unstable pages. A new <a href="/guides/">Guides</a> section has been added to cover some of the common how-tos and whys behind design decisions.</p> <p>There is now also an <a href="/playground/">Interactive Playground</a>, for tinkerers and immediate gratification. You can use it try out Quill’s features and experiment with its API, without any setup or installation.</p> <h3 id="whats-next">What’s Next</h3> <p>Quill will continue to refine itself in being the easiest editor to use, while allowing for the most sophisticated customizations. With a stable and solid foundation on 1.0, some areas of focus will include:</p> <ul> <li>Iterating on modules and themes, making them easier to create, customize and share</li> <li>Add remaining common formats, such as tables</li> <li>Better internationalization support</li> </ul> <h3 id="getting-started">Getting Started</h3> <p>If you are just joining us today, the example editors on the <a href="/">homepage</a> are an excellent demonstration of the gorgeous editing experiences you can add to your application. Make sure to open up your developer console to play around with the API.</p> <p>Head to the <a href="/playground/">Interactive Playground</a> if you want to tinker some more or to the <a href="/docs/quickstart/">Quickstart</a> docs if you are ready to add Quill, with just a few lines of code.</p> <h3 id="credits">Credits</h3> <p>Last, but not least, <strong>a special thank you goes out to Quill’s community.</strong> Whether you contributed code for the codebase, help for other community members, reports or context for bugs, ideas for new features or improve existing ones, feedback on use cases, or evangelism for the project, Quill would not be nearly as successful without your collective efforts. Thank you for your contribution!</p>
</content>
<author>
<name/>
</author>
<summary type="html">
Quill 1.0 has arrived. It was just two years ago that Quill made its public debut as an open source project. Today, it can be found in applications and products of all sizes, ranging from personal projects and promising startups, to established public companies.
</summary>
</entry>
<entry>
<title type="html">Quill 1.0 Release Candidate… Released!</title>
<link href="https://quilljs.com/blog/quill-1-0-release-candidate-released/" rel="alternate" type="text/html" title="Quill 1.0 Release Candidate... Released!"/>
<published>2016-08-18T00:00:00-07:00</published>
<updated>2016-08-18T00:00:00-07:00</updated>
<id>
https://quilljs.com/blog/quill-1-0-release-candidate-released
</id>
<content type="html" xml:base="https://quilljs.com/blog/quill-1-0-release-candidate-released/">
<p>Today Quill enters its highly anticipated 1.0 release candidacy. Through the 11 beta releases, over 300 reported bugs were fixed, and almost 1000 commits were made. <strong>Thank you to all contributors who pitched in, in ways small and large, isolated and numerous, either reporting issues, committing code, or otherwise helping out the community!</strong></p> <p>The <a href="/docs/api/">API</a> should now be considered stable, with only backwards compatible bug fixes to look forward to. No additional new features are planned until after the official 1.0 release.</p> <!-- more --> <p>You can now access the release candidate from npm:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install quill@1.0.0-rc.0 </code></pre></div></div> <p>As always our CDN is also available:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"//cdn.quilljs.com/1.0.0-rc.0/quill.snow.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span> <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"//cdn.quilljs.com/1.0.0-rc.0/quill.bubble.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdn.quilljs.com/1.0.0-rc.0/quill.js"</span><span class="nt">&gt;&lt;/script&gt;</span> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdn.quilljs.com/1.0.0-rc.0/quill.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span> </code></pre></div></div> <p>If you are just joining from the 0.20.1 or older, take a look at the updated <a href="/guides/upgrading-to-1-0/">Upgrading to 1.0 Guide</a>. If you prefer to stay with 0.20, the <a href="/0.20/">documentation</a> will remain available.</p> <h3 id="many-new-formats">Many New Formats</h3> <p>Quill 1.0 adds several new formats and improves on existing ones. Superscript, subscript, inline code and blocks, headers, blockquotes, text direction, and video support have all been added. List can also now be nested and formats previously implemented with just inline styles can now use classes <a href="/playground/#class-vs-inline-style">instead</a>.</p> <p>Syntax highlighted <a href="/docs/modules/syntax/">code</a> and LaTeX <a href="/docs/modules/formula/">formulas</a> can also be added with an optional module.</p> <h3 id="brand-new-theme">Brand New Theme</h3> <p>An entirely new theme <a href="/docs/themes/#bubble">Bubble</a> has also been added, based on a floating toolbar.</p> <p><img src="/assets/images/blog/bubble.png" alt="Color Icon" /></p> <p>Both Snow and Bubble now also use SVG icons to sharply scale to whatever size your application demands. The icons are implemented to be added to the DOM directly so you can customize the active color and enable less obvious UI enhancements.</p> <p><img src="/assets/images/blog/color.png" alt="Color Icon" /></p> <h3 id="more-configurable-modules">More Configurable Modules</h3> <p>Existing modules have much more customization capabilities in 1.0, with new configurations and APIs. Most notably:</p> <ul> <li><a href="/docs/modules/clipboard/">Clipboard</a> introduces the ability to customize interpretation of pasted content before it reaches the editor.</li> <li><a href="/docs/modules/keyboard/">Keyboard</a> adds a context option to give much more granular control over when bindings are triggered.</li> <li><a href="/docs/modules/toolbar/">Toolbar</a> can be much more easily configured with just an array, and now exposes options to overwrite its handler.</li> </ul> <h3 id="parchment">Parchment</h3> <p><a href="https://github.com/quilljs/parchment/">Parchment</a> also enters its 1.0 release candidacy today. For Quill, not only did Parchment enable the addition the numerous formats, it enables a path to the new generation of content creation. Text today is written to be rendered on the web, offering a much richer canvas than a printed piece of paper. Content can now be live, interactive, or even collaborative.</p> <p>Users have already been using Quill in beta to successfully support these editing experiences. This is possible in part due to the <a href="/docs/api/">API</a> Quill was designed with at inception, but now Parchment takes that further by providing a powerful abstraction layer over the DOM. This enables the addition of new content and formats that cannot exist on paper or even anticipated by Quill’s developers.</p> <p>Of course, Quill still ships with ready to go defaults, so you can integrate and use it with just a few lines of code—you never have to do more if your product needs never demands it.</p> <p>Jump to the <a href="/">demo</a> to see Quill’s new features or try out some code in the <a href="/playground/">Interactive Playground</a>!</p>
</content>
<author>
<name/>
</author>
<summary type="html">
Today Quill enters its highly anticipated 1.0 release candidacy. Through the 11 beta releases, over 300 reported bugs were fixed, and almost 1000 commits were made. Thank you to all contributors who pitched in, in ways small and large, isolated and numerous, either reporting issues, committing code, or otherwise helping out the community!
</summary>
</entry>
<entry>
<title type="html">Quill 1.0 Beta Release</title>
<link href="https://quilljs.com/blog/quill-1-0-beta-release/" rel="alternate" type="text/html" title="Quill 1.0 Beta Release"/>
<published>2016-05-03T00:00:00-07:00</published>
<updated>2016-05-03T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/quill-1-0-beta-release</id>
<content type="html" xml:base="https://quilljs.com/blog/quill-1-0-beta-release/">
<p>Today Quill is ready for its first beta preview of 1.0. This is the biggest rewrite to Quill since its inception and enables many new possibilities not available in previous versions of Quill, nor any other editor. The code is as always available on Github and through npm:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install quill@1.0.0-beta.0 </code></pre></div></div> <p>The skeleton of a new documentation site is also being built out at <a href="https://beta.quilljs.com">beta.quilljs.com</a>. Whereas the current site focuses on being a referential resource, the new site will also be a guide to provide insight on approaching different customization goals. There is also an <a href="https://beta.quilljs.com/playground/">interactive playground</a> to try out various configurations and explore the API.</p> <!-- more --> <p>The goal now is of course an official 1.0 release. To get there, Quill will now enter a weekly cadence of beta releases, so you can expect rapid interations on stability and bug fixes each week. Github is still the center of all development so please do report <a href="https://github.com/quilljs/quill/issues">Issues</a> as you encounter them in the beta preview.</p>
</content>
<author>
<name/>
</author>
<summary type="html">
Today Quill is ready for its first beta preview of 1.0. This is the biggest rewrite to Quill since its inception and enables many new possibilities not available in previous versions of Quill, nor any other editor. The code is as always available on Github and through npm:
</summary>
</entry>
<entry>
<title type="html">Are We There Yet (to 1.0)?</title>
<link href="https://quilljs.com/blog/are-we-there-yet-to-1-0/" rel="alternate" type="text/html" title="Are We There Yet (to 1.0)?"/>
<published>2016-03-14T00:00:00-07:00</published>
<updated>2016-03-14T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/are-we-there-yet-to-1-0</id>
<content type="html" xml:base="https://quilljs.com/blog/are-we-there-yet-to-1-0/">
<p>When Quill laid out its <a href="/blog/the-road-to-1-0/">1.0 roadmap</a>, core to its journey was the development of a new document model called Parchment. Today a beta release of Parchment is being made available on <a href="https://github.com/quilljs/parchment">Github</a> and <a href="https://www.npmjs.com/package/parchment">NPM</a>.</p> <p>What this means is its design and API is reasonably stable and the adventurous can now take an early look. The latest Quill source is already using Parchment to implement its formatting and content capabilities, and its <a href="https://github.com/quilljs/quill/tree/develop/formats">integration</a> would be a helpful example of Parchment in action. Of course, this is in addition to Parchment’s own <a href="https://github.com/quilljs/parchment/blob/master/README.md">documentation</a>.</p> <!-- more --> <h3 id="new-formats">New Formats</h3> <p>Parchment enables Quill to scalably support many formats and many are being added in 1.0. The list includes headers, blockquotes, code, superscript, subscript, text direction, nested lists, and video embeds. Syntax highlighted code and formulas will also be available through externally supported modules. In addition, formats that previously relied on style attributes are reimplemented to optionally use classes instead. By default, fonts, sizes, and text alignment will use classes, while foreground and background colors will still use style attributes, since there are so many possible color values.</p> <h3 id="quill-10-beta">Quill 1.0 Beta</h3> <p>With Parchment out of the way, Quill is nearing its own 1.0 release. This will also be prefaced with a beta period, optimistically planned for early April. You can also set up the <a href="https://github.com/quilljs/quill/blob/develop/.github/CONTRIBUTING.md#local-development">local development</a> environment to follow along with the latest changes and progress.</p> <p>If you are currently using Quill at your company or project, we’d love to hear about your use case <a href="mailto:hello@quilljs.com">hello@quilljs.com</a>!</p>
</content>
<author>
<name/>
</author>
<summary type="html">
When Quill laid out its 1.0 roadmap, core to its journey was the development of a new document model called Parchment. Today a beta release of Parchment is being made available on Github and NPM.
</summary>
</entry>
<entry>
<title type="html">The Road to 1.0</title>
<link href="https://quilljs.com/blog/the-road-to-1-0/" rel="alternate" type="text/html" title="The Road to 1.0"/>
<published>2015-09-15T00:00:00-07:00</published>
<updated>2015-09-15T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/the-road-to-1-0</id>
<content type="html" xml:base="https://quilljs.com/blog/the-road-to-1-0/">
<p>Quill launched with the ambitious goal of becoming <em>the</em> rich text editor for the web, being both easy to use for drop in use cases, and powerful enough for complex ones. Its current <a href="/docs/api/">API</a> is core to those goals.</p> <p>In the past months, much effort has been placed into providing even greater means for customization, particularly the editor’s contents. With this nearing completion, Quill is approaching its 1.0 coming of age.</p> <h3 id="parchment">Parchment</h3> <p>A full introduction and guide to Parchment is still forthcoming, but in short it is a new document model for Quill. An editor’s document model is an important abstraction over the DOM that allows the editor and API users to reason about its contents through a much simpler yet more expressive interface than directly interacting with the browser. For Quill, this enables an elegant solution to the longstanding problem of format customization.</p> <!-- more --> <p>Prior to Parchment, Quill required near complete control over its editor container and descendant DOM nodes in order to provide its precise retrieval and manipulation API. Even simple modifications such as changing the default link open behavior required hacks and defining new content types, such as syntax highlighted code, was impossible.</p> <p>Parchment hands control of entire subtrees back to the user, allowing the definition of new nodes or overwriting existing ones. The requirement is that certain methods such as <code class="highlighter-rouge">getValue</code> and <code class="highlighter-rouge">getFormat</code> be defined in order to happily exist within a Parchment document. Those familiar will find this very similar to <code class="highlighter-rouge">render</code> and Components in <a href="https://facebook.github.io/react/">React</a>, a significant influencer of Parchment’s design.</p> <p>While the Parchment interface is still being stabilized, a preview of a definition for a <a href="https://github.com/Khan/KaTeX">KaTeX</a> equation looks like this (with ES6 syntax):</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Equation</span> <span class="kd">extends</span> <span class="nx">Parchment</span><span class="p">.</span><span class="nx">Embed</span> <span class="p">{</span> <span class="kd">constructor</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">super</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">domNode</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'contenteditable'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">domNode</span><span class="p">);</span> <span class="p">}</span> <span class="nx">getValue</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> <span class="nx">Quill</span><span class="p">.</span><span class="nx">registerFormat</span><span class="p">(</span><span class="nx">Equation</span><span class="p">);</span> </code></pre></div></div> <p>The current priority is to integrate Parchment into Quill as its new document model. However, Parchment is and will remain organized as its own <a href="https://github.com/quilljs/parchment">repository</a>, as it was designed as a general purpose tool. Hopefully one day it may serve as the document model for other editors as well.</p> <h3 id="formats">Formats</h3> <p>Parchment opens the doors to scalably support many more formats, many of which will be included in the 1.0 release. The complete list is not ready for announcement but they will at least include semantic headers and nested lists. Equations and syntax highlighted code will also be added as separate repositories because of their likely dependency on external libraries.</p> <h3 id="modules">Modules</h3> <p>Quill organizes most of its source code as modules to make it easy to overwrite their default behavior. Unfortunately a documentation gap currently exists for these modules–this will have to be filled for their extensibility to be realized.</p> <p>Some non-essential modules will also be moved out into their own repositories. Custom builds are planned to conveniently include or exclude these modules, along with other permutations, though this may land post 1.0 depending on timing.</p> <h3 id="beyond-10">Beyond 1.0</h3> <p>With Quill 1.0, the main foundations will be complete and much more emphasis will be placed into building examples and enhancing support, with internationalization, accessibility, and cross application interactions (copy/paste) as main focus points.</p> <p>In addition, Quill’s UI is due for an upgrade. While the aesthetics of Quill is already completely customizable, more numerous defaults could be available for those wanting a drop in solution. Here’s a sneak peak at a couple of upcoming themes in the works:</p> <p> <img class="road-1-theme-preview" src="/assets/images/blog/theme-1.png" alt="Quill Theme 1" /> <img class="road-1-theme-preview" src="/assets/images/blog/theme-2.png" alt="Quill Theme 2" /> </p> <p>Finally, the community deserves a great thank you for all of your contributions and support! All the <a href="https://github.com/quilljs/quill/labels/bug">bug reports</a>, <a href="https://github.com/quilljs/quill/labels/feature">features suggestions</a> and <a href="https://github.com/quilljs/quill/pulls?q=is%3Apr">pull requests</a> make Quill what it is today. Keep these coming! Exciting times are ahead for web editing and for Quill.</p>
</content>
<author>
<name/>
</author>
<summary type="html">
Quill launched with the ambitious goal of becoming the rich text editor for the web, being both easy to use for drop in use cases, and powerful enough for complex ones. Its current API is core to those goals.
</summary>
</entry>
<entry>
<title type="html">Quill v0.19 - No More Iframes</title>
<link href="https://quilljs.com/blog/quill-v0-19-no-more-iframes/" rel="alternate" type="text/html" title="Quill v0.19 - No More Iframes"/>
<published>2014-11-06T00:00:00-08:00</published>
<updated>2014-11-06T00:00:00-08:00</updated>
<id>
https://quilljs.com/blog/quill-v0-19-no-more-iframes
</id>
<content type="html" xml:base="https://quilljs.com/blog/quill-v0-19-no-more-iframes/">
<p>Customizability is core to Quill’s ethos and the new <a href="https://github.com/quilljs/quill/releases/tag/v0.19.0">v0.19 release</a> is a big step towards fulfilling that mission. In previous versions Quill utilized an iframe to contain the editor. This unfortunately prevented expected browser behaviors and made it difficult for developers to access and extend Quill<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. Its removal is the biggest change in v0.19 and some rippling effects are expected. They, and other changes for v0.19, are summarized here.</p> <h3 id="styles">Styles</h3> <p>With iframes gone it is now much easier to customize the styling of the Quill editor and unecessary for Quill to do so on your behalf in most cases. This leads to a few changes:</p> <p>You can now pass <code class="highlighter-rouge">false</code> into the <a href="/docs/configuration/#styles">style config</a> to prevent Quill from injecting any <code class="highlighter-rouge">&lt;style&gt;</code> tags. No change is necessary if the default behavior is preferred, but this added option makes it easier and more efficient for those that prefer to completely control styling with stylesheets. For this latter route, <code class="highlighter-rouge">quill.base.css</code> is now included in releases and the CDN.</p> <!-- more --> <p>Since adding and customizing styles is no longer inaccessible, the <code class="highlighter-rouge">addStyles</code> helper is no longer particularly useful and has been removed.</p> <p>All Quill containers’ class names have changed to be prefixed with <code class="highlighter-rouge">ql-</code>. If your application was using these names in any way they will need to be updated.</p> <p>Quill is also no longer “protected” from external styles so it should be treated with the same caution as any other front end library. In particular, avoiding overly general css rules will help ensure a peaceful coexistence.</p> <h3 id="scripts">Scripts</h3> <p>It was always possible to access and manipulate Quill’s editor, but without an iframe the task is now easy. While this greatly simplifies custom enhancements it also makes it easier to inadvertently interfere with Quill’s necessary operations. But with modern developer tools and practices, the risks can be mitigated and ultimately the benefits of customization is worthwhile.</p> <p>This is a good time to reiterate good bug reporting practices, not just for Quill but for all open source projects. Reducing bugs into the simplest case and providing repeatable reproduction instructions will help isolate the source of issues.</p> <h3 id="default-theme">Default Theme</h3> <p>The default theme in Quill has been renamed from <code class="highlighter-rouge">default</code> to <code class="highlighter-rouge">base</code>. No change should be necessary unless the <code class="highlighter-rouge">default</code> theme was explicitly being included in the <a href="/docs/configuration/#theme">theme config</a> in which case it should be changed to <code class="highlighter-rouge">base</code>.</p> <h3 id="npm">NPM</h3> <p>Quill is now listed in npm as <code class="highlighter-rouge">quill</code> instead of <code class="highlighter-rouge">quilljs</code>. Quill was already listed as <code class="highlighter-rouge">quill</code> on bower so its name will now be consistent across package managers.</p> <h3 id="contributing">Contributing</h3> <p>Finally, community contribution and involvement has been tremendous and both the project and everyone using it reaps the benefits. A big thanks for all the contributions so far and keep them coming!</p> <div class="footnotes"> <ol> <li id="fn:1"> <p>See <a href="https://www.jasonchen.me/editors-and-iframes/">Editors and Iframes</a> for full details. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p> </li> </ol> </div>
</content>
<author>
<name/>
</author>
<summary type="html">
Customizability is core to Quill’s ethos and the new v0.19 release is a big step towards fulfilling that mission. In previous versions Quill utilized an iframe to contain the editor. This unfortunately prevented expected browser behaviors and made it difficult for developers to access and extend Quill1. Its removal is the biggest change in v0.19 and some rippling effects are expected. They, and other changes for v0.19, are summarized here. See Editors and Iframes for full details. &#8617;
</summary>
</entry>
<entry>
<title type="html">Upgrading to Rich Text Deltas</title>
<link href="https://quilljs.com/blog/upgrading-to-rich-text-deltas/" rel="alternate" type="text/html" title="Upgrading to Rich Text Deltas"/>
<published>2014-10-19T00:00:00-07:00</published>
<updated>2014-10-19T00:00:00-07:00</updated>
<id>
https://quilljs.com/blog/upgrading-to-rich-text-deltas
</id>
<content type="html" xml:base="https://quilljs.com/blog/upgrading-to-rich-text-deltas/">
<p>The new rich text type is now live and being used in Quill v0.18.0. It is a big step towards 1.0 and will be the way documents and changes are represented going forward. In most cases this update is non-disruptive and an upgrade can be a simple increment of the version number<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>.</p> <p>However, if you happened to be storing the old Delta format, here’s a short guide on how to migrate.</p> <p>The main relevant differences between the old and new Deltas are:</p> <ol> <li>Explicit deletes - We need to go through the old Delta, find the implied deletes and insert explicit delete operations into the new Delta</li> <li>Support for embeds - If we see the hacky representation of embeds, replace with the new representation</li> </ol> <!-- more --> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">richText</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'rich-text'</span><span class="p">);</span> <span class="kd">var</span> <span class="nx">newDelta</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">richText</span><span class="p">.</span><span class="nx">Delta</span><span class="p">();</span> <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">changeLength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">oldDelta</span><span class="p">.</span><span class="nx">ops</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">op</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Insert operation</span> <span class="k">if</span> <span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s1">'!'</span> <span class="o">&amp;&amp;</span> <span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">&amp;&amp;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">src</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Found the old hacky representation for an embed</span> <span class="c1">// Quill only supports images so far so we can be confident this is an image</span> <span class="c1">// which is represented by 1</span> <span class="nx">newDelta</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nx">newDelta</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span> <span class="p">}</span> <span class="nx">changeLength</span> <span class="o">+=</span> <span class="nx">op</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">end</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Retain operation</span> <span class="k">if</span> <span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">start</span> <span class="o">&gt;</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Delete operation was implied by the current retain operation</span> <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">op</span><span class="p">.</span><span class="nx">start</span> <span class="o">-</span> <span class="nx">index</span><span class="p">;</span> <span class="nx">newDelta</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="nx">changeLength</span> <span class="o">-=</span> <span class="nx">length</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// Now handle or retain operation</span> <span class="nx">newDelta</span><span class="p">.</span><span class="nx">retain</span><span class="p">(</span><span class="nx">op</span><span class="p">.</span><span class="nx">end</span> <span class="o">-</span> <span class="nx">op</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span> <span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">op</span><span class="p">.</span><span class="nx">end</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'You have a misformed delta'</span><span class="p">);</span> <span class="p">}</span> <span class="p">});</span> <span class="c1">// Handle implied deletes at the end of the document</span> <span class="k">if</span> <span class="p">(</span><span class="nx">oldDelta</span><span class="p">.</span><span class="nx">endLength</span> <span class="o">&lt;</span> <span class="nx">oldDelta</span><span class="p">.</span><span class="nx">startLength</span> <span class="o">+</span> <span class="nx">changeLength</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">oldDelta</span><span class="p">.</span><span class="nx">startLength</span> <span class="o">+</span> <span class="nx">changeLength</span> <span class="o">-</span> <span class="nx">oldDelta</span><span class="p">.</span><span class="nx">endLength</span><span class="p">;</span> <span class="nx">newDelta</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">length</span><span class="p">);</span> <span class="p">}</span> </code></pre></div></div> <p>If you cannot use the rich-text module or if you are using this as a general guide for another language, the following might be helpful in crafting insert, delete and retain operations.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">var</span> <span class="nx">nweDelta</span> <span class="o">=</span> <span class="p">{</span> <span class="na">ops</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span> <span class="nx">oldDelta</span><span class="p">.</span><span class="nx">ops</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// Following a similar logic to the earlier snippet</span> <span class="c1">// except replacing .insert(), .retain(), .delete() with:</span> <span class="c1">// insertOp(newDelta.ops, value, formats)</span> <span class="c1">// retainOp(newDelta.ops, length, formats)</span> <span class="c1">// deleteOp(newDelta.ops, length)</span> <span class="p">});</span> <span class="kd">function</span> <span class="nx">insertOp</span><span class="p">(</span><span class="nx">opsArr</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">formats</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">op</span> <span class="o">=</span> <span class="p">{</span> <span class="na">insert</span><span class="p">:</span> <span class="nx">text</span> <span class="p">};</span> <span class="k">if</span> <span class="p">(</span><span class="nx">formats</span> <span class="o">&amp;&amp;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">formats</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">formats</span><span class="p">;</span> <span class="p">}</span> <span class="nx">opsArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">op</span><span class="p">);</span> <span class="p">};</span> <span class="kd">function</span> <span class="nx">deleteOp</span><span class="p">(</span><span class="nx">opsArr</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="nx">opsArr</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="na">delete</span><span class="p">:</span> <span class="nx">length</span> <span class="p">});</span> <span class="p">}</span> <span class="kd">function</span> <span class="nx">retainOp</span><span class="p">(</span><span class="nx">opsArr</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">formats</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">op</span> <span class="o">=</span> <span class="p">{</span> <span class="na">retain</span><span class="p">:</span> <span class="nx">length</span> <span class="p">};</span> <span class="k">if</span> <span class="p">(</span><span class="nx">formats</span> <span class="o">&amp;&amp;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">formats</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">op</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">formats</span><span class="p">;</span> <span class="p">}</span> <span class="nx">opsArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">op</span><span class="p">);</span> <span class="p">}</span> </code></pre></div></div> <p>There are some optimizations performed by rich-text such as excluding no-ops (delete 0 characters) and merging two adjacent operations of the same type (insert ‘A’ followed by insert ‘B’ is merged to be a single insert ‘AB’ operation). But you should not have to worry about these cases since the old Delta format had similar optimizations.</p> <div class="footnotes"> <ol> <li id="fn:1"> <p>All it took to upgrade the examples on quilljs.com was: <a href="https://github.com/quilljs/quill/commit/2580c2a5d440622d226fbef407df7a5a5e9dcf61">2580c2</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p> </li> </ol> </div>
</content>
<author>
<name/>
</author>
<summary type="html">
The new rich text type is now live and being used in Quill v0.18.0. It is a big step towards 1.0 and will be the way documents and changes are represented going forward. In most cases this update is non-disruptive and an upgrade can be a simple increment of the version number1. All it took to upgrade the examples on quilljs.com was: 2580c2 &#8617;
</summary>
</entry>
<entry>
<title type="html">A New Delta</title>
<link href="https://quilljs.com/blog/a-new-delta/" rel="alternate" type="text/html" title="A New Delta"/>
<published>2014-09-29T00:00:00-07:00</published>
<updated>2014-09-29T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/a-new-delta</id>
<content type="html" xml:base="https://quilljs.com/blog/a-new-delta/">
<p>Part of providing a complete API in Quill is providing events for when and what changes occur in the editor. Those changes are currently represented by a <a href="/guides/working-with-deltas/">Delta</a> object, which aims to be intuitive, human-readable, and expressive for any change or document that might need to represented. Over the past few weeks I’ve been working on a new format that better fulfills those goals and addresses the challenges in the current format.</p> <p>Documentation for the new Delta format can be found in its own <a href="https://github.com/ottypes/rich-text">Github repository</a> but I will go over some of the rationale behind some of the changes in this post.</p> <!-- more --> <h3 id="reduced-complexity">Reduced Complexity</h3> <p>When the Delta format was originally designed, it had ambitious goals of being general purpose and being able to represent any kind of document. The new format reduces the scope to just rich text documents, allowing for a much tighter implementation<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>.</p> <p>Quill is not specifically built to be a collaborative editor but the ability to be used as one is a good benchmark of the API. The new Delta format maintains this capability and fulfills the specifications of an <a href="https://github.com/ottypes/docs">ottype</a>, making it compatible with <a href="https://github.com/share/ShareJS">ShareJS</a>.</p> <h3 id="explicit-deletes">Explicit Deletes</h3> <p>In the current Delta format, a delete operation is implied by a lack of a retain operation. Basically everything is deleted unless you say it should be kept. This has some nice properties from an implementation perspective<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> but was probably the largest source of confusion for users trying to work with Deltas and challenged the human-readability goal. It is very difficult to keep track of indexes to figure out what was not accounted for, to figure out what should be deleted.</p> <p>The new format has an explicit delete operation and by default everything is kept. Here’s a comparison of the two formats both representing removing the ‘b’ in ‘abc’.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">oldFormat</span> <span class="o">=</span> <span class="p">{</span> <span class="na">startLength</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">endLength</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">ops</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">start</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">end</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="na">start</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">end</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">]</span> <span class="p">};</span> <span class="kd">var</span> <span class="nx">newFormat</span> <span class="o">=</span> <span class="p">{</span> <span class="na">ops</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">retain</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">{</span> <span class="na">delete</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">]</span> <span class="p">};</span> </code></pre></div></div> <p>A side effect of having explicit deletes and defaulting to keeping text is that in practice the representation for new Deltas will usually be smaller.</p> <h3 id="embed-support">Embed Support</h3> <p>The new Delta format provides native support for embeds, which can be used to represent images, video, etc. There is no support for this in the current format and implementation is hackily achieved by representing an ‘!’ with a image key in the attributes (which will break when video support is added).</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">oldFormat</span> <span class="o">=</span> <span class="p">{</span> <span class="na">startLength</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">endLength</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">ops</span><span class="p">:</span> <span class="p">[{</span> <span class="na">text</span><span class="p">:</span> <span class="s1">'!'</span><span class="p">,</span> <span class="na">attributes</span><span class="p">:</span> <span class="p">{</span> <span class="na">image</span><span class="p">:</span> <span class="s1">'https://octodex.github.com/images/labtocat.png'</span> <span class="p">}</span> <span class="p">}]</span> <span class="p">};</span> <span class="kd">var</span> <span class="nx">newFormat</span> <span class="o">=</span> <span class="p">{</span> <span class="na">ops</span><span class="p">:</span> <span class="p">[{</span> <span class="na">insert</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">attributes</span><span class="p">:</span> <span class="p">{</span> <span class="na">image</span><span class="p">:</span> <span class="s1">'https://octodex.github.com/images/labtocat.png'</span> <span class="p">}</span> <span class="p">}]</span> <span class="p">};</span> </code></pre></div></div> <h3 id="going-forward">Going Forward</h3> <p>This new format will be the finalized representation for changes and state in Quill going forward and is one of the major steps toward a 1.0 release (a topic for another post).</p> <div class="footnotes"> <ol> <li id="fn:1"> <p>Currently 28658 vs 9507 lines of code (though in practice is less relevant due to minification and gzip). <a href="#fnref:1" class="reversefootnote">&#8617;</a></p> </li> <li id="fn:2"> <p>Minimizes number of operations to support, and easy to calculate the length of text of the resulting document which is useful for sanity checks. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p> </li> </ol> </div>
</content>
<author>
<name/>
</author>
<summary type="html">
Part of providing a complete API in Quill is providing events for when and what changes occur in the editor. Those changes are currently represented by a Delta object, which aims to be intuitive, human-readable, and expressive for any change or document that might need to represented. Over the past few weeks I’ve been working on a new format that better fulfills those goals and addresses the challenges in the current format.
</summary>
</entry>
<entry>
<title type="html">Building A Custom Module</title>
<link href="https://quilljs.com/blog/building-a-custom-module/" rel="alternate" type="text/html" title="Building A Custom Module"/>
<published>2014-08-14T00:00:00-07:00</published>
<updated>2014-08-14T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/building-a-custom-module</id>
<content type="html" xml:base="https://quilljs.com/blog/building-a-custom-module/">
<p><em>Note: An updated guide for 1.0 and ES6 is available <a href="/guides/building-a-custom-module/">here</a>.</em></p> <p>Quill’s core strength as an editor is its rich API and powerful customization capabilities. One of the best ways to customize Quill is with a module. A module is a simple way to augment Quill’s functionality. For the purpose of this guide, we will walk through one way to build a word counter module, a commonly found feature in many word processors.</p> <h3 id="counting-words">Counting Words</h3> <p>At its core a word counter simply counts the number of words in the editor and displays this value in some UI. Thus we need to:</p> <ol> <li>Listen on text changes in Quill.</li> <li>Count the number of words.</li> <li>Display this value.</li> </ol> <p>Let’s jump straight in with a complete example!</p> <!-- more --> <div data-height="406" data-theme-id="23270" data-slug-hash="qkniF" data-default-tab="js" class="codepen"><pre><code> // Implement and register module Quill.registerModule('counter', function(quill, options) { var container = document.querySelector('#counter'); quill.on('text-change', function() { var text = quill.getText(); // There are a couple issues with counting // this way but we'll fix this later container.innerHTML = text.split(/\s+/).length; }); }); // We can now initialize Quill with something like this: var quill = new Quill('#editor', { modules: { counter: true } }); </code></pre></div> <p>That’s all it takes to add a custom module to Quill! A function can be <a href="/docs/api/#quillregistermodule/">registered</a> as a module and it will be passed the corresponding Quill editor object along with any options.</p> <h3 id="using-options">Using Options</h3> <p>Modules are passed an options object that can be used to fine tune the desired behavior. We can use this to accept a selector for the counter container instead of a hard-coded string. Let’s also customize the counter to either count words or characters:</p> <div data-height="466" data-theme-id="23270" data-slug-hash="eKIBb" data-default-tab="js" class="codepen"><pre><code> Quill.registerModule('counter', function(quill, options) { var container = document.querySelector(options.container); quill.on('text-change', function() { var text = quill.getText(); if (options.unit === 'word') { container.innerHTML = text.split(/\s+/).length + ' words'; } else { container.innerHTML = text.length + ' characters'; } }); }); var quill = new Quill('#editor', { modules: { counter: { container: '#counter', unit: 'word' } } }); </code></pre></div> <h3 id="constructors">Constructors</h3> <p>Since any function can be registered as a Quill module, we could have implemented our counter as a constructor. This allows us to access and utilize the module directly.</p> <div data-height="666" data-theme-id="23270" data-slug-hash="zCIur" data-default-tab="js" class="codepen"><pre><code> var Counter = function(quill, options) { this.quill = quill; this.options = options; var container = document.querySelector(options.container); var _this = this; quill.on('text-change', function() { var length = _this.calculate(); container.innerHTML = length + ' ' + options.unit + 's'; }); }; Counter.prototype.calculate = function() { var text = this.quill.getText(); if (this.options.unit === 'word') { return text.split(/\s+/).length; } else { return text.length; } }; Quill.registerModule('counter', Counter); var quill = new Quill('#editor'); var counter = quill.addModule('counter', { container: '#counter', unit: 'word' }); // We can now access calculate() directly console.log(counter.calculate(), 'words'); </code></pre></div> <h3 id="wrapping-it-all-up">Wrapping It All Up</h3> <p>Now let’s polish off the module and fix a few pesky bugs.</p> <div data-height="766" data-theme-id="23270" data-slug-hash="wxtvI" data-default-tab="js" class="codepen"><pre><code> var Counter = function(quill, options) { this.quill = quill; this.options = options; this.container = document.querySelector(options.container); quill.on('text-change', this.update.bind(this)); this.update(); // Account for initial contents }; Counter.prototype.calculate = function() { var text = this.quill.getText(); if (this.options.unit === 'word') { text = text.trim(); // Splitting empty text returns a non-empty array return text.length &gt; 0 ? text.split(/\s+/).length : 0; } else { return text.length; } }; Counter.prototype.update = function() { var length = this.calculate(); var label = this.options.unit; if (length !== 1) { label += 's'; } this.container.innerHTML = length + ' ' + label; } Quill.registerModule('counter', Counter); var quill = new Quill('#editor'); var counter = quill.addModule('counter', { container: '#counter', unit: 'word' }); </code></pre></div> <p>That’s all there is to it! Stay tuned for more guides on common types of modules you can build.</p> <!-- script --> <script src="//codepen.io/assets/embed/ei.js"></script> <!-- script -->
</content>
<author>
<name/>
</author>
<summary type="html">
Note: An updated guide for 1.0 and ES6 is available here.
</summary>
</entry>
<entry>
<title type="html">An Offical CDN for Quill</title>
<link href="https://quilljs.com/blog/an-official-cdn-for-quill/" rel="alternate" type="text/html" title="An Offical CDN for Quill"/>
<published>2014-08-12T00:00:00-07:00</published>
<updated>2014-08-12T00:00:00-07:00</updated>
<id>https://quilljs.com/blog/an-official-cdn-for-quill</id>
<content type="html" xml:base="https://quilljs.com/blog/an-official-cdn-for-quill/">
<p>Quill now has an offical Content Distribution Network so you can have access to a reliable, high-speed host for the library. To include a file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"//cdn.quilljs.com/0.16.0/quill.snow.css"</span> <span class="nt">/&gt;</span> </code></pre></div></div> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdn.quilljs.com/0.16.0/quill.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span> </code></pre></div></div> <p>You can also use “latest” as the version:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdn.quilljs.com/latest/quill.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span> </code></pre></div></div>
</content>
<author>
<name/>
</author>
<summary type="html">
Quill now has an offical Content Distribution Network so you can have access to a reliable, high-speed host for the library. To include a file:
</summary>
</entry>
</feed>